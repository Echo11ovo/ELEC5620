import sqlite3
import csv
from app import db
from werkzeug.security import generate_password_hash, check_password_hash


# Define the User model.
# This represents the structure of our "users" table in the database.
class User(db.Model):
    # Define columns for the user table.
    id = db.Column(db.Integer, primary_key=True)   # A unique identifier for each user.
    username = db.Column(db.String(80), unique=True, nullable=False)  # The user's chosen username. It must be unique.
    password_hash = db.Column(db.String(120), nullable=False)         # The hashed version of the user's password.
    user_type = db.Column(db.String(80), nullable=False)              # The type of user, e.g., Customer, Merchant, Data Analyst.

    # Method to set the hashed version of the provided password.
    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    # Method to verify if the provided password matches the hashed version stored in the database.
    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

# This line will create all the necessary database tables.
# Note: It's better to manage database migrations with tools like Flask-Migrate in a production scenario.
db.create_all()
# Query data from the database
def queryData(query):
    # db_file = analysisdata.db
    # query: sql query generated by GPT-3
    db_file = 'analysisdata.db'
    conn = sqlite3.connect(db_file)
    cursor = conn.cursor()
    sql_query = query
    try:
        cursor.execute(sql_query)
        dataRequired = cursor.fetchall()
        headers = [description[0] for description in cursor.description]
        return headers, dataRequired

    except Exception as e:
        print(f"Error: {e}")
        return None, None

    finally:
        cursor.close()
        conn.close()


# Process data format
def displayData(headers, dataRequired):
    # headers: headers returned from queryData()
    # dataRequired: data returned from queryData()
    # return data in a readable format
    if headers is not None and dataRequired is not None:
        data = []
        for row in dataRequired:
            row = list(row)
            data.append(dict(zip(headers, row)))
        return data

# Write data to .csv file
def generateCSV(headers, dataRequired, output_file):
    # dataRequired: data returned from queryData()
    # write data to .csv file
    if headers is not None and dataRequired is not None:
        try:
            with open(output_file, mode='w', newline='') as file:
                writer = csv.writer(file)
                writer.writerow(headers)  # Write the header
                writer.writerows(dataRequired)  # Write the data rows
            return True
        except Exception as e:
            print(f"Error writing to CSV: {e}")
    return False

# sql = "SELECT * FROM orders WHERE quantity < 3"
# headers, dataRequired = queryData(sql)
# data = displayData(headers, dataRequired)
# print(data)
# generateCSV(headers, dataRequired, 'output.csv')
